---
import OtherLayout from '@lay/OtherLayout.astro';
import OtherProfileImage from "@com/main/OtherProfileImage.astro";
import { Icon } from 'astro-icon/components'; // Using astro-icon for the checkmark

import onlineusers from './api/users';

// Assuming `currentUsername` is passed as a prop or defined somewhere in your component
const currentUsername = 'dex'; // Replace this with the dynamic username, e.g., from props or state

// Function to check if the user is logged in
const checkUserLoggedInStatus = (username) => {
  const currentUser = onlineusers.find(user => user.username === username);
  return currentUser ? currentUser.loggedin : false; // true if logged in, false otherwise
};

// Call the function with the dynamic username
const isLoggedIn = checkUserLoggedInStatus(currentUsername);

// Find the current user details
const currentUser = onlineusers.find(user => user.username === user.username);

// Check if the user has a profile picture
const hasProfilePic = true;

const url = new URL(Astro.request.url);
const currentPage = parseInt(url.searchParams.get('page')) || 1;
const view = url.searchParams.get('view') || 'active'; // Default to 'active' users if no view is set
const friends = url.searchParams.get('friends') || 'include'; // Default to 'include' friends if no filter is set

const allUsersUrl = `/browse?view=active&friends=${friends}`;
const newUsersUrl = `/browse?view=new`;
const onlineUsersUrl = `/browse?view=online&friends=${friends}`;
const includeFriendsUrl = `/browse?view=${view}&friends=include`;
const excludeFriendsUrl = `/browse?view=${view}&friends=exclude`;

// Generate a URL for the next page, keeping the `view` and `friends` query parameters if present
const nextPage = currentPage + 1;
const nextPageUrl =
  view === 'new'
    ? `/browse?view=new&page=${nextPage}` // Exclude friends parameter for New Users
    : `/browse?view=${view}&friends=${friends}&page=${nextPage}`; // Include friends for other views

// Define different sets of users for each filter
const users = Array.from({ length: 30 }, (_, i) => `user${i + 1}`);
const newUsers = Array.from({ length: 15 }, (_, i) => `newUser${i + 1}`);
const onlineUsers = Array.from({ length: 20 }, (_, i) => `onlineUser${i + 1}`);

const generateRandomProfileUrl = () => {
  const randomIndex = Math.floor(Math.random() * users.length);
  return `/${users[randomIndex]}`;
};

// List of unique names (ensure there are at least 45)
const uniqueNames = [
  'Alex', 'Jordan', 'Taylor', 'Morgan', 'Jamie', 'Casey', 'Riley', 'Cameron', 'Drew', 'Parker',
  'Avery', 'Quinn', 'Sydney', 'Reese', 'Emerson', 'Hayden', 'Kai', 'Rowan', 'Blake', 'Charlie',
  'Harper', 'River', 'Skylar', 'Sawyer', 'Dakota', 'Phoenix', 'Tatum', 'Finley', 'Lennon', 'Remi',
  'Marley', 'Hunter', 'Sage', 'Dylan', 'Lane', 'Luca', 'Elliot', 'Ari', 'Toby', 'Noah', 'Micah', 'Spencer',
  'Richard', 'Thomas', 'Steve'
];

const availableNumbers = Array.from({ length: 45 }, (_, i) => i + 1);

const shuffleArray = (array) => {
  let shuffledArray = array.slice();
  for (let i = shuffledArray.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];
  }
  return shuffledArray;
};

const shuffledNames = shuffleArray(uniqueNames);
const shuffledNumbers = shuffleArray(availableNumbers);

const getUniqueImageNumber = () => shuffledNumbers.pop();
const getUniqueName = () => shuffledNames.pop();

// Function to get users based on the current filter
const getFilteredUsers = () => {
  if (view === 'new') {
    return newUsers;
  } else if (view === 'online') {
    return onlineUsers;
  }
  return users; // Default to 'all users'
};

const filteredUsers = getFilteredUsers();
---
<OtherLayout title="Browse" pagetitle="Browse Users">
  <div class="ml-0.5">
    <div class="flex items-stretch text-xs mb-3">
      <p class="text-xs cursor-default font-semibold">Filter:</p>
      <div class="flex items-center">
        <a href={allUsersUrl}
           class={view === 'active' ? "font-semibold" : "ml-1 font-normal hover:underline"}>
           <div class="flex items-center space-x-1 group text-neutral-950 fill-neutral-950 hover:text-red-600 hover:fill-red-600 hover:underline">
             {view === 'active' && <Icon name="checkmark" class="ml-1 w-[14px] h-[14px]" />} {/* Green checkmark when active */}
             <p>All Users</p>
           </div>
        </a>

        <div class="ml-1 cursor-default font-medium text-xs">-</div>

        <a href={onlineUsersUrl}
           class={view === 'online' ? "font-semibold" : "ml-1 font-normal hover:underline"}>
           <div class="flex items-center space-x-1 group text-neutral-950 fill-neutral-950 hover:text-red-600 hover:fill-red-600 hover:underline">
            {view === 'online' && <Icon name="checkmark" class="ml-1 w-[14px] h-[14px]" />} {/* Green checkmark when active */}
            <p>Online Users</p>
          </div>
        </a>

        <div class="ml-1 cursor-default font-medium text-xs">-</div>

        <a href={newUsersUrl}
           class={view === 'new' ? "font-semibold" : "ml-1 font-normal hover:underline"}>
           <div class="flex items-center space-x-1 group text-neutral-950 fill-neutral-950 hover:text-red-600 hover:fill-red-600 hover:underline">
            {view === 'new' && <Icon name="checkmark" class="ml-1 w-[14px] h-[14px]" />} {/* Green checkmark when active */}
            <p>New Users</p>
          </div>
        </a>
      </div>
    </div>
{ view !== 'new' && (
  <div class="flex items-stretch text-xs mb-3">
    <p class="text-xs cursor-default font-semibold">Friends:</p>
    <div class="flex items-center">
      <a href={includeFriendsUrl}
         class={friends === 'include' ? "font-semibold" : "ml-1 font-normal hover:underline"}>
         <div class="flex items-center space-x-1 group text-neutral-950 fill-neutral-950 hover:text-red-600 hover:fill-red-600 hover:underline">
          {friends === 'include' && <Icon name="checkmark" class="ml-1 w-[14px] h-[14px]" />} {/* Green checkmark when active */}
          <p>Include Friends</p>
        </div>
      </a>

      <div class="ml-1 cursor-default font-medium text-xs">-</div>

      <a href={excludeFriendsUrl}
         class={friends === 'exclude' ? "font-semibold" : "ml-1 font-normal hover:underline"}>
         <div class="flex items-center space-x-1 group text-neutral-950 fill-neutral-950 hover:text-red-600 hover:fill-red-600 hover:underline">
          {friends === 'exclude' && <Icon name="checkmark" class="ml-1 w-[14px] h-[14px]" />} {/* Green checkmark when active */}
          <p>Exclude Friends</p>
        </div>
      </a>
    </div>
  </div>
)}
    <div class="-ml-0.5">
      <div class="py-0.5 bg-neutral-950">
        <div class="flex justify-between items-center mx-2">
          <p class="text-xs font-semibold mt-1 cursor-default text-white">
            { view === 'new' ? 'New Users' // Exclude the friends part for "New People"
                : `${view === 'online' ? 'Online Users' : 'All Users'} - ${friends === 'include' ? 'Including Friends' : 'Excluding Friends'}`}
          </p>
          <a class="text-[10.24px] hover:underline text-white" href={generateRandomProfileUrl()}>[random]</a>
        </div>
      </div>
      <div class="border-2 border-neutral-950">
        <div class={`${hasProfilePic ? 'ml-2 mr-0.5 mb-0.5 mt-1.5' : 'ml-2 mr-0.5 mb-2 mt-1.5'}`}>
          <div class="grid grid-cols-5 gap-x-[40px] gap-y-[10px]">
            {
              filteredUsers.map(() => {
                const randomImageNumber = getUniqueImageNumber();
                const randomName = getUniqueName();
  
                // Check if randomName or user is defined before using toLowerCase()
                if (!randomName) return null;
  
                return (
                  <a class="text-neutral-950 hover:text-red-600 hover:underline" href={`/${randomName.toLowerCase()}`} title={`Visit ${randomName}'s profile`}>
                    <p class="text-xs flex justify-center font-semibold mb-0.5">{randomName}</p>
                    <div>
                      { hasProfilePic ?
                        <OtherProfileImage
                          width={96}
                          height={96}
                          srcurl={`https://i.pravatar.cc/96?img=${randomImageNumber}`}
                          altText={`${randomName}'s profile picture`}
                          loggedin={isLoggedIn}
                        />
                        :
                        <div class="relative">
                          <Icon class="w-[96px] h-[96px]" name="avatar" />
                          { isLoggedIn && <div class="absolute bottom-0 right-0 block w-[20px] h-[20px] rounded-full bg-green-500 border-[2px] border-white -mb-1 mr-[1px]"></div> }
                        </div>
                      }
                    </div>
                  </a>
                );
              })
            }
          </div>
        </div>
      </div>
    </div>
    <div class="flex items-center justify-between mt-3 mb-2">
      <a class="text-xs text-neutral-950 hover:text-red-600 font-normal hover:underline -ml-0.5" href="/invite">Invite your friends to join Kinva!</a>
      <button
        type="button"
        class="py-[2px] px-2 bg-neutral-950 hover:bg-neutral-950/90 text-xs text-white border border-neutral-950"
        aria-label="Next Page"
        onclick=`window.location.href='${nextPageUrl}'`>
        Next Page
      </button>
    </div>
  </div>
</OtherLayout>