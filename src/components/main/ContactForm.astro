---
import OtherLayout from '@lay/OtherLayout.astro';
---

<OtherLayout title="Contact" pagetitle="Contact Us">
  <!-- Contact form section -->
  <div id="contactForm" class="mb-2 ml-0.5">
    <form id="contactFormElement" action="/api/submit" method="POST" class="space-y-2" onsubmit="handleSubmit(event)">
      <!-- Honeypot Field -->
      <div style="display: none;">
        <label for="honeypot"></label>
        <input type="text" name="honeypot" id="honeypot" value="">
      </div>

      <!-- Name Field -->
      <div>
        <label for="name" class="text-[12.8px]">Your name:</label>
        <input
          type="text"
          id="name"
          name="name"
          class="py-1 px-3 pr-5 block w-full border border-[#252728] text-sm"
        />
      </div>

      <!-- Email Field -->
      <div>
        <label for="email" class="text-[12.8px]">Email address:</label>
        <input
          type="email"
          id="email"
          name="email"
          class="py-1 px-3 pr-5 block w-full border border-[#252728] text-sm"
        />
      </div>

      <!-- Reason Dropdown -->
      <div>
        <label for="reason" class="text-[12.8px]">Reason for your message:</label>
        <select
          id="reason"
          name="reason"
          class="py-1 px-3 pr-5 block w-full border border-[#252728] text-sm"
        >
          <option value="">Select a reason</option>
          <option value="support">Support</option>
          <option value="feedback">Feedback</option>
          <option value="press">Press</option>
        </select>
      </div>

      <!-- Message Field -->
      <div>
        <label for="message" class="text-[12.8px]">Message:</label>
        <textarea
          id="message"
          name="message"
          class="p-2 w-full text-sm border border-[#252728] placeholder:text-[#252728]/70 resize-none"
          rows="6"
          placeholder="Type your message here"
        ></textarea>
      </div>

      <button type="submit" class="bg-[#252728]/10 hover:bg-[#252728]/15 text-xs border border-[#252728] py-0.5 px-2">Send</button>
    </form>
  </div>

  <!-- Thank You message section, initially hidden -->
  <div id="thankYouMessage" class="hidden text-center py-14">
    <h1 class="text-3xl font-bold mb-2">Thank You!</h1>
    <p class="text-lg">Your message was sent successfully</p>
    <p class="text-[10px] text-center mt-5">Redirecting to your homepage in <span class="text-[#252728] font-semibold" id="seconds">10</span> seconds</p>
  </div>
</OtherLayout>

<style>
  input[name="honeypot"] {
    display: none;
    visibility: hidden;
  }
  .hidden {
    display: none;
  }
  .error-message {
    color: #dc2626; /* Tailwind red-600 */
    font-size: 0.875rem; /* Tailwind text-sm */
    margin-bottom: 0.25rem; /* Tailwind mt-1 */
  }
</style>

<script is:inline>
  // Handle form submission
  function handleSubmit(event) {
    event.preventDefault();

    // Honeypot validation
    const honeypot = document.getElementById('honeypot').value;
    if (honeypot) {
      alert('Spam detected. Form not submitted.');
      return;
    }

    // Form data validation
    const formData = new FormData(event.target);
    const data = {
      name: formData.get('name'),
      email: formData.get('email'),
      reason: formData.get('reason'),
      message: formData.get('message'),
    };

    // Clear any previous error messages before validation
    clearErrorMessages();

    if (!validateForm(data)) return;

    // Simulate form submission with fetch (replace with actual API call)
    fetch('/api/submit', {
      method: 'POST',
      body: formData,
    })
      .then((response) => {
        if (response.ok) {
          document.getElementById('contactForm').style.display = 'none';
          document.getElementById('thankYouMessage').classList.remove('hidden');
          document.getElementById('pagetitle').style.display = 'none'; // Hide the pagetitle
          startCountdown();
        } else {
          showErrorGlobal('There was an issue submitting your message. Please try again later.');
        }
      })
      .catch((error) => {
        console.error('Error:', error);
        showErrorGlobal('There was an issue submitting your message. Please try again later.');
      });
  }

  // Countdown and redirection to the homepage
  function startCountdown() {
    let timeLeft = 10;
    function tick() {
      document.getElementById('seconds').textContent = timeLeft.toString();
      if (timeLeft > 0) {
        timeLeft--;
        setTimeout(tick, 1000);
      } else {
        window.location.href = '/';
      }
    }
    setTimeout(tick, 1000);
  }

  // Validate form data
  function validateForm(data) {
    let isValid = true;

    // Name validation
    if (data.name.length < 2) {
      showError('Name must be at least 2 characters.', 'name');
      isValid = false;
    }

    // Email validation
    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(data.email)) {
      showError('Please enter a valid email address.', 'email');
      isValid = false;
    }

    // Reason validation
    if (!data.reason) {
      showError('Please select a reason for your message.', 'reason');
      isValid = false;
    }

    // Message validation
    if (data.message.length < 10) {
      showError('Message must be at least 10 characters.', 'message');
      isValid = false;
    }

    return isValid;
  }

  // Function to display an error message above a specific field
  function showError(message, fieldId) {
    const field = document.getElementById(fieldId);
    const errorMessage = document.createElement('div');
    errorMessage.className = 'text-red-600 text-sm mt-1 error-message';
    errorMessage.innerHTML = message;

    // Insert the error message above the label, not the input field
    const label = field.previousElementSibling;
    if (label && label.tagName === 'LABEL') {
      label.parentNode.insertBefore(errorMessage, label);
    }

    // Remove the error message after 5 seconds
    setTimeout(() => errorMessage.remove(), 5000);
  }

  // Function to clear all previous error messages
  function clearErrorMessages() {
    const errorMessages = document.querySelectorAll('.error-message');
    errorMessages.forEach((msg) => msg.remove());
  }

  // Function to show a global error message
  function showErrorGlobal(message) {
    const formMessage = document.createElement('div');
    formMessage.className = 'text-red-600 text-sm mt-4 error-message';
    formMessage.innerHTML = message;
    document.getElementById('contactFormElement').prepend(formMessage);
    setTimeout(() => formMessage.remove(), 5000);
  }
</script>